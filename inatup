#!/usr/bin/gawk -f

# iNat-up
# For loading observations to iNaturalist
# by Cam Webb <cw@camwebb.info> 2017
# License: CC:C0

@include "lib/JSON_include.awk"
@include "lib/util.awk"
@include "lib/config.awk"  

BEGIN{
  
  # Init
  user_config();
  init_json();
  DEBUG = 0;

  ## read the args

  if ((ARGC == 3) && (ARGV[1] == "--del")) {
    delobs(ARGV[2]);
    exit;
  }
  
  ## For each collection/observation
  while ((getline < INFILE) > 0) {
    # Re-init
    taxoninfo = testtaxon = testrank = testtaxonid          \
      = date = longlat = elev = collcode = idby = indiv = iddate        \
      = loc = collectors = cmd = files = nfiles = newphoto \
      = newid = place = taxfound = ntype = nparts = qname = "";
    desc = DESC; fields = 0;

    # Skip the header
    ++lineno;
    if ((HEADER) && (lineno == 1)) continue;

    # Clean spaces around data (need to escape any regex special chars)
    sep = FS; if (sep == "|") sep = "\\|";
    m = sep "\\ +" ; gsub(m, FS, $0);
    m = "\\ +" sep ; gsub(m, FS, $0);
    # remove any quotes (too hard to work out how to escape them!)
    gsub(/["']/,"",$0);
    
    if (!$fCollCode) {
      makelog("Record w/o collcode. Skipping\n");
      continue;
    }

    makelog("Coll: " $fCollCode);

    # Test for photos
    cmd = "find img/" $fCollCode " -type f | sort";
    RS="\x04";
    cmd | getline files;
    close(cmd); RS="\n";
    
    if (!files) {
      makelog("  No directory of images. Skipping\n");
      idlist[$fCollCode] = ""; 
      continue;
    }
    
    ### 1. Make the new obs ###
    
    # Elements of data
    # date and TZ
    if ($fCollDate) {
      date = "--data-urlencode 'observation[observed_on_string]=" $fCollDate \
        "' --data-urlencode 'observation[time_zone]=" TZ "'";
    }

    # Long, Lat
    if (($fLat ~ /^[0-9]+.[0-9]+$/) && ($fLong ~ /^[0-9]+.[0-9]+$/)) {
      longlat = "--data-urlencode 'observation[latitude]=" $fLat \
        "' --data-urlencode 'observation[longitude]=" $fLong            \
        "' --data-urlencode 'observation[positional_accuracy]=50'";
      # default accuracy
    }
    else {
      makelog("  Record w/o good long/lat. Skipping\n");
      idlist[$fCollCode] = ""; 
      continue;
    }
    
    # Elevation
    if ($fElev) {
      elev = "--data-urlencode 'observation[observation_field_values_attributes][" fields "][observation_field_id]=7588' --data-urlencode 'observation[observation_field_values_attributes][" fields++ "][value]=" $fElev " m'" ;
    }
    
    # Collection code
    if (COLLS) {
      collcode = "--data-urlencode 'observation[observation_field_values_attributes][" fields "][observation_field_id]=7584' --data-urlencode 'observation[observation_field_values_attributes][" fields++ "][value]=" $fCollCode "'" ;
      desc = DESC " Collection code: " $fCollCode ".";
    }
    
    # Individual id
    if ($fIndiv) {
      indiv = "--data-urlencode 'observation[observation_field_values_attributes][" fields "][observation_field_id]=6934' --data-urlencode 'observation[observation_field_values_attributes][" fields++ "][value]=" $fIndiv "'" ;
    }
    
    # Locality
    if ($fLoc) {
      loc = "--data-urlencode 'observation[observation_field_values_attributes][" fields "][observation_field_id]=7587' --data-urlencode 'observation[observation_field_values_attributes][" fields++ "][value]=" $fLoc "'" ;
    }
    
    # Collectors
    if ($fCollBy) {
      collectors = "--data-urlencode 'observation[observation_field_values_attributes][" fields "][observation_field_id]=7262' --data-urlencode 'observation[observation_field_values_attributes][" fields++ "][value]=" $fCollBy "'" ;
    }
    
    # Description
    desc = "--data-urlencode 'observation[description]=" desc "'" ;

    print "  Making obs" > "/dev/stderr"; close("/dev/stderr");
    parse_json(curl("POST", "Authorization: Bearer " AUTHTOKEN,         \
                    (taxoninfo " " date " " longlat " " elev " " collcode \
                     " " indiv " " idby " " iddate " " loc " " collectors \
                     " " desc),                   \
                    "https://www.inaturalist.org/observations.json"));

    # test for error (FIXME)
    
    newid = JSONPATH[0,"\"id\""];
    place = JSONPATH[0,"\"place_guess\""];
    makelog("  New Obs id: " newid );
    idlist[$fCollCode] = newid;
    # for checking long/lat:
    makelog("  Place: " place );

    ### 2. Add the det ###

    if (!$fName) ntype = "none";
    # Check for the name in iNat:
    else {
      # clean any extra spaces between Genus and sp
      gsub(/\ +/," ",$fName); 
      makelog("  Taxon: " $fName );

      # specific epithet?
      # if ($fName ~ /\ /) ntype = "gs";
      nparts = split($fName, npart, " ");
      if (nparts > 1) {
        ntype = "gs"; qname = npart[1] " " npart[2]; }
      else {
        ntype = "g"; # Also works for just a family name
        qname = npart[1];
      }
      
      parse_json(curl("GET", "Accept: application/json",    \
                      "--data-urlencode 'q=" qname "'",\
                      "http://api.inaturalist.org/v1/taxa/autocomplete" ));
    
      testtaxon   = gensub(/"/,"","G", JSONPATH["\"results\"",0,"\"name\""]);
      testrank    = gensub(/"/,"","G", JSONPATH["\"results\"",0,"\"rank\""]);
      testtaxonid = gensub(/"/,"","G", JSONPATH["\"results\"",0,"\"id\""]);

      # if found
      if ($fName == testtaxon) {
        makelog("  Taxon found: " testtaxon "; rank: " testrank"; ID: " \
                testtaxonid );
        taxoninfo = "--data-urlencode 'identification[taxon_id]="   \
          testtaxonid "'";
        taxfound = "gs";
      }
      # if not, and the first try was g+s, can we match the g?  
      else if (ntype == "gs") {
        # Query again
        makelog("  G+sp not found. Querying genus (or fam) only");
        # re-init
        testtaxon = testrank = testtaxonid = genus = "";
        # genus = gensub(/\ .*$/, "", "G", $fName);
        genus = npart[1];  # redundent, fixme
        parse_json(curl("GET", "Accept: application/json",  \
                        "--data-urlencode 'q=" genus "'",
                        "http://api.inaturalist.org/v1/taxa/autocomplete" ));
    
        testtaxon   = gensub(/"/,"","G", JSONPATH["\"results\"",0,"\"name\""]);
        testrank    = gensub(/"/,"","G", JSONPATH["\"results\"",0,"\"rank\""]);
        testtaxonid = gensub(/"/,"","G", JSONPATH["\"results\"",0,"\"id\""]);

        # if found
        if (genus == testtaxon) {
          makelog("  Genus (or fam) found: " testtaxon "; rank: " testrank \
                  "; ID: " testtaxonid );
          taxoninfo = "--data-urlencode 'identification[taxon_id]=" \
            testtaxonid "'";
          taxfound = "g";
        }
      }
    }

    # Default taxon
    if (!taxfound) {
      makelog("  Name not found (or not given). Using Plantae.");
      taxoninfo = "--data-urlencode 'identification[taxon_id]=" DEFTAXID "'";
    }

    # now for the appropriate other details

    if (nparts > 2) {
      # if ($fSciName) {
      # always give the sci name, if it exists
      detnote = "dwc:scientificName = " $fName "\n";
      # Ugly. Sending real new line, but curl --data-urlencode gets it right
    }

    # only give the $fName if the matched taxon_id has less info than $fName
    if ((ntype == "gs") && (taxfound == "g")) {
      detnote = detnote "(FIXME: " $fName " not found in iNat taxonomy)\n";
      # else: the name that was found (gs or g) for taxon_id is sufficient
    }
    else if (($fName) && (!taxfound)) {
      detnote = detnote " (FIXME: " $fName " not found in iNat taxonomy)\n";
    }

    # determiner and date
    if ($fDetBy) detnote = detnote "dwc:identifiedBy = " $fDetBy "\n" ;
    else detnote = detnote "dwc:identifiedBy = " DEFDETBY "\n" ;

    if ($fDetDate) detnote = detnote "dwc:dateIdentified = " $fDetDate ;
    # else if ($fCollDate) detnote = detnote "dwc:dateIdentified " $fCollDate ;

    # make the curl parameter
    detnote = "--data-urlencode 'identification[body]=" detnote "'";

    # POST the det
    print "  Making det" > "/dev/stderr"; close("/dev/stderr");
    parse_json(curl("POST", ("Authorization: Bearer " AUTHTOKEN),       \
                    ( "--data-urlencode 'identification[observation_id]=" \
                      newid "' " taxoninfo " " detnote ) ,              \
                    "https://www.inaturalist.org/identifications.json"));

    # test for error (FIXME)
    
    ### 3. Upload photos (already checked above) ###
    
    nfiles = split(files, file, "\n");
    for (i = 1 ; i < nfiles; i++) {
      print "  Photo " i ": " file[i] >> "upload.log";  close("upload.log");
      print "  Uploading photo " i > "/dev/stderr"; close("/dev/stderr");

      newphoto = curl("POST", "Authorization: Bearer " AUTHTOKEN,       \
                      "-F 'observation_photo[observation_id]=" newid \
                      "' -F 'file=@" file[i] "'",\
                      "https://www.inaturalist.org/observation_photos");
      
      if (newphoto ~ /[Ee]rror/) {
        print "    Photo error!" >> "upload.log";
        close("upload.log");
      }
    }
    delete file;
    delete npart;
    # make lookup table:
    print $fCollCode "|" newid "\n" >> "upload.log";  close("upload.log");
  }
  
}

function delobs(obsid      ) {
  # basic error checking
  if (obsid !~ /^[0-9]+$/) {
    print "Argument supplied is not an iNat observation format. Exiting." \
      > "/dev/stderr";
  }
  else if (obsid < SAFEOBS) {
    print "Observation # is too low, below safe threshold (" SAFEOBS ")." \
      " Exiting." > "/dev/stderr";
  }
  else {
    print "Attempting to delete observation " obsid > "/dev/stderr";
    delreturn = curl("DELETE", ("Authorization: Bearer " AUTHTOKEN), "", \
                     ("https://www.inaturalist.org/observations/" obsid \
                      ".json"));
    # Error check
    if (delreturn) {
      makelog("Data was returned, indicating an error: " delreturn);
    }
    else {
      # Note API reference says info should be returned as JSON, but a
      #   successful delete seems to return nothing. So no parse_json() used.
      makelog("Obs ID " obsid " has been deleted.\n");
    }
  }
  return;
}
